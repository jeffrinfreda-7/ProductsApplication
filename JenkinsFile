pipeline {
    docker {
                image 'product-application-pipeline:v1'
                args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Optional: Mount Docker socket if you need Docker inside Docker
            }
    stages {
        stage('Checkout') {
            steps {
                // Clone the repository from your GitHub URL
                git branch: 'main', url: 'https://github.com/jeffrinfreda-7/ProductsApplication.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // Build the project and create a JAR file
                dir('ProductsApplication') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://18.212.41.180:9000/"  // Ensure this is your actual SonarQube server URL
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    dir('ProductsApplication') {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "jeffrinfreda7/product-application-pipeline:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    // Build the Docker image
                    def image = docker.build("${DOCKER_IMAGE}", "ProductsApplication")

                    // Log in to Docker registry and push the image
                    docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
                        image.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "ProductsApplication"
                GIT_USER_NAME = "jeffrinfreda-7"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {
                        // Configure Git
                        sh '''
                            git config --global user.email "jeffrinjfreda@gmail.com"
                            git config --global user.name "jeffrinfreda-7"
                        '''
                                                // Replace image tag in the deployment file
                        sh """
                            BUILD_NUMBER=${BUILD_NUMBER}
                            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" k8s-manifests/deployment.yml
                        """

                        // Commit and push changes
                        sh """
                            git add k8s-manifests/deployment.yml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        """
                    }
                }
            }
        }
    }
}
